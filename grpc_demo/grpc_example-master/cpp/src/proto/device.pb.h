// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_device_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_device_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_device_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_device_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_device_2eproto;
namespace device_service {
class DeviceInfoDetail;
struct DeviceInfoDetailDefaultTypeInternal;
extern DeviceInfoDetailDefaultTypeInternal _DeviceInfoDetail_default_instance_;
class DeviceInfoRequest;
struct DeviceInfoRequestDefaultTypeInternal;
extern DeviceInfoRequestDefaultTypeInternal _DeviceInfoRequest_default_instance_;
class DeviceInfoResponse;
struct DeviceInfoResponseDefaultTypeInternal;
extern DeviceInfoResponseDefaultTypeInternal _DeviceInfoResponse_default_instance_;
class DeviceNameListRequest;
struct DeviceNameListRequestDefaultTypeInternal;
extern DeviceNameListRequestDefaultTypeInternal _DeviceNameListRequest_default_instance_;
class DeviceNameListResponse;
struct DeviceNameListResponseDefaultTypeInternal;
extern DeviceNameListResponseDefaultTypeInternal _DeviceNameListResponse_default_instance_;
class DeviceSlaveCntRequest;
struct DeviceSlaveCntRequestDefaultTypeInternal;
extern DeviceSlaveCntRequestDefaultTypeInternal _DeviceSlaveCntRequest_default_instance_;
class DeviceSlaveCntResponse;
struct DeviceSlaveCntResponseDefaultTypeInternal;
extern DeviceSlaveCntResponseDefaultTypeInternal _DeviceSlaveCntResponse_default_instance_;
class DeviceTableBySlaveIdRequest;
struct DeviceTableBySlaveIdRequestDefaultTypeInternal;
extern DeviceTableBySlaveIdRequestDefaultTypeInternal _DeviceTableBySlaveIdRequest_default_instance_;
class DeviceTableBySlaveIdResponse;
struct DeviceTableBySlaveIdResponseDefaultTypeInternal;
extern DeviceTableBySlaveIdResponseDefaultTypeInternal _DeviceTableBySlaveIdResponse_default_instance_;
class DeviceTableRow;
struct DeviceTableRowDefaultTypeInternal;
extern DeviceTableRowDefaultTypeInternal _DeviceTableRow_default_instance_;
}  // namespace device_service
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace device_service {

// ===================================================================


// -------------------------------------------------------------------

class DeviceTableRow final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:device_service.DeviceTableRow) */ {
 public:
  inline DeviceTableRow() : DeviceTableRow(nullptr) {}
  ~DeviceTableRow() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceTableRow(::google::protobuf::internal::ConstantInitialized);

  inline DeviceTableRow(const DeviceTableRow& from)
      : DeviceTableRow(nullptr, from) {}
  DeviceTableRow(DeviceTableRow&& from) noexcept
    : DeviceTableRow() {
    *this = ::std::move(from);
  }

  inline DeviceTableRow& operator=(const DeviceTableRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceTableRow& operator=(DeviceTableRow&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceTableRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceTableRow* internal_default_instance() {
    return reinterpret_cast<const DeviceTableRow*>(
               &_DeviceTableRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeviceTableRow& a, DeviceTableRow& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceTableRow* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceTableRow* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceTableRow* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceTableRow>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceTableRow& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceTableRow& from) {
    DeviceTableRow::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceTableRow* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "device_service.DeviceTableRow";
  }
  protected:
  explicit DeviceTableRow(::google::protobuf::Arena* arena);
  DeviceTableRow(::google::protobuf::Arena* arena, const DeviceTableRow& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
  };
  // repeated string row = 1;
  int row_size() const;
  private:
  int _internal_row_size() const;

  public:
  void clear_row() ;
  const std::string& row(int index) const;
  std::string* mutable_row(int index);
  void set_row(int index, const std::string& value);
  void set_row(int index, std::string&& value);
  void set_row(int index, const char* value);
  void set_row(int index, const char* value, std::size_t size);
  void set_row(int index, absl::string_view value);
  std::string* add_row();
  void add_row(const std::string& value);
  void add_row(std::string&& value);
  void add_row(const char* value);
  void add_row(const char* value, std::size_t size);
  void add_row(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& row() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_row();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_row() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_row();

  public:
  // @@protoc_insertion_point(class_scope:device_service.DeviceTableRow)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      41, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> row_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2eproto;
};// -------------------------------------------------------------------

class DeviceTableBySlaveIdRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:device_service.DeviceTableBySlaveIdRequest) */ {
 public:
  inline DeviceTableBySlaveIdRequest() : DeviceTableBySlaveIdRequest(nullptr) {}
  ~DeviceTableBySlaveIdRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceTableBySlaveIdRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeviceTableBySlaveIdRequest(const DeviceTableBySlaveIdRequest& from)
      : DeviceTableBySlaveIdRequest(nullptr, from) {}
  DeviceTableBySlaveIdRequest(DeviceTableBySlaveIdRequest&& from) noexcept
    : DeviceTableBySlaveIdRequest() {
    *this = ::std::move(from);
  }

  inline DeviceTableBySlaveIdRequest& operator=(const DeviceTableBySlaveIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceTableBySlaveIdRequest& operator=(DeviceTableBySlaveIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceTableBySlaveIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceTableBySlaveIdRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceTableBySlaveIdRequest*>(
               &_DeviceTableBySlaveIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeviceTableBySlaveIdRequest& a, DeviceTableBySlaveIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceTableBySlaveIdRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceTableBySlaveIdRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceTableBySlaveIdRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceTableBySlaveIdRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceTableBySlaveIdRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceTableBySlaveIdRequest& from) {
    DeviceTableBySlaveIdRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceTableBySlaveIdRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "device_service.DeviceTableBySlaveIdRequest";
  }
  protected:
  explicit DeviceTableBySlaveIdRequest(::google::protobuf::Arena* arena);
  DeviceTableBySlaveIdRequest(::google::protobuf::Arena* arena, const DeviceTableBySlaveIdRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
    kPointNameFieldNumber = 3,
    kSlaveIdFieldNumber = 2,
  };
  // string device_name = 1;
  void clear_device_name() ;
  const std::string& device_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_name(Arg_&& arg, Args_... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* value);

  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(
      const std::string& value);
  std::string* _internal_mutable_device_name();

  public:
  // string point_name = 3;
  void clear_point_name() ;
  const std::string& point_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_point_name(Arg_&& arg, Args_... args);
  std::string* mutable_point_name();
  PROTOBUF_NODISCARD std::string* release_point_name();
  void set_allocated_point_name(std::string* value);

  private:
  const std::string& _internal_point_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_point_name(
      const std::string& value);
  std::string* _internal_mutable_point_name();

  public:
  // int32 slave_id = 2;
  void clear_slave_id() ;
  ::int32_t slave_id() const;
  void set_slave_id(::int32_t value);

  private:
  ::int32_t _internal_slave_id() const;
  void _internal_set_slave_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:device_service.DeviceTableBySlaveIdRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      72, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr device_name_;
    ::google::protobuf::internal::ArenaStringPtr point_name_;
    ::int32_t slave_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2eproto;
};// -------------------------------------------------------------------

class DeviceSlaveCntResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:device_service.DeviceSlaveCntResponse) */ {
 public:
  inline DeviceSlaveCntResponse() : DeviceSlaveCntResponse(nullptr) {}
  ~DeviceSlaveCntResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceSlaveCntResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeviceSlaveCntResponse(const DeviceSlaveCntResponse& from)
      : DeviceSlaveCntResponse(nullptr, from) {}
  DeviceSlaveCntResponse(DeviceSlaveCntResponse&& from) noexcept
    : DeviceSlaveCntResponse() {
    *this = ::std::move(from);
  }

  inline DeviceSlaveCntResponse& operator=(const DeviceSlaveCntResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceSlaveCntResponse& operator=(DeviceSlaveCntResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceSlaveCntResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceSlaveCntResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceSlaveCntResponse*>(
               &_DeviceSlaveCntResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeviceSlaveCntResponse& a, DeviceSlaveCntResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceSlaveCntResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceSlaveCntResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceSlaveCntResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceSlaveCntResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceSlaveCntResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceSlaveCntResponse& from) {
    DeviceSlaveCntResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceSlaveCntResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "device_service.DeviceSlaveCntResponse";
  }
  protected:
  explicit DeviceSlaveCntResponse(::google::protobuf::Arena* arena);
  DeviceSlaveCntResponse(::google::protobuf::Arena* arena, const DeviceSlaveCntResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlaveCntFieldNumber = 1,
  };
  // int32 slave_cnt = 1;
  void clear_slave_cnt() ;
  ::int32_t slave_cnt() const;
  void set_slave_cnt(::int32_t value);

  private:
  ::int32_t _internal_slave_cnt() const;
  void _internal_set_slave_cnt(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:device_service.DeviceSlaveCntResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t slave_cnt_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2eproto;
};// -------------------------------------------------------------------

class DeviceSlaveCntRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:device_service.DeviceSlaveCntRequest) */ {
 public:
  inline DeviceSlaveCntRequest() : DeviceSlaveCntRequest(nullptr) {}
  ~DeviceSlaveCntRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceSlaveCntRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeviceSlaveCntRequest(const DeviceSlaveCntRequest& from)
      : DeviceSlaveCntRequest(nullptr, from) {}
  DeviceSlaveCntRequest(DeviceSlaveCntRequest&& from) noexcept
    : DeviceSlaveCntRequest() {
    *this = ::std::move(from);
  }

  inline DeviceSlaveCntRequest& operator=(const DeviceSlaveCntRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceSlaveCntRequest& operator=(DeviceSlaveCntRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceSlaveCntRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceSlaveCntRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceSlaveCntRequest*>(
               &_DeviceSlaveCntRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeviceSlaveCntRequest& a, DeviceSlaveCntRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceSlaveCntRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceSlaveCntRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceSlaveCntRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceSlaveCntRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceSlaveCntRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceSlaveCntRequest& from) {
    DeviceSlaveCntRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceSlaveCntRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "device_service.DeviceSlaveCntRequest";
  }
  protected:
  explicit DeviceSlaveCntRequest(::google::protobuf::Arena* arena);
  DeviceSlaveCntRequest(::google::protobuf::Arena* arena, const DeviceSlaveCntRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
  };
  // string device_name = 1;
  void clear_device_name() ;
  const std::string& device_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_name(Arg_&& arg, Args_... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* value);

  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(
      const std::string& value);
  std::string* _internal_mutable_device_name();

  public:
  // @@protoc_insertion_point(class_scope:device_service.DeviceSlaveCntRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr device_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2eproto;
};// -------------------------------------------------------------------

class DeviceNameListResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:device_service.DeviceNameListResponse) */ {
 public:
  inline DeviceNameListResponse() : DeviceNameListResponse(nullptr) {}
  ~DeviceNameListResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceNameListResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeviceNameListResponse(const DeviceNameListResponse& from)
      : DeviceNameListResponse(nullptr, from) {}
  DeviceNameListResponse(DeviceNameListResponse&& from) noexcept
    : DeviceNameListResponse() {
    *this = ::std::move(from);
  }

  inline DeviceNameListResponse& operator=(const DeviceNameListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceNameListResponse& operator=(DeviceNameListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceNameListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceNameListResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceNameListResponse*>(
               &_DeviceNameListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeviceNameListResponse& a, DeviceNameListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceNameListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceNameListResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceNameListResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceNameListResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceNameListResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceNameListResponse& from) {
    DeviceNameListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceNameListResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "device_service.DeviceNameListResponse";
  }
  protected:
  explicit DeviceNameListResponse(::google::protobuf::Arena* arena);
  DeviceNameListResponse(::google::protobuf::Arena* arena, const DeviceNameListResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNamesFieldNumber = 1,
  };
  // repeated string device_names = 1;
  int device_names_size() const;
  private:
  int _internal_device_names_size() const;

  public:
  void clear_device_names() ;
  const std::string& device_names(int index) const;
  std::string* mutable_device_names(int index);
  void set_device_names(int index, const std::string& value);
  void set_device_names(int index, std::string&& value);
  void set_device_names(int index, const char* value);
  void set_device_names(int index, const char* value, std::size_t size);
  void set_device_names(int index, absl::string_view value);
  std::string* add_device_names();
  void add_device_names(const std::string& value);
  void add_device_names(std::string&& value);
  void add_device_names(const char* value);
  void add_device_names(const char* value, std::size_t size);
  void add_device_names(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& device_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_device_names();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_device_names() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_device_names();

  public:
  // @@protoc_insertion_point(class_scope:device_service.DeviceNameListResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      58, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> device_names_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2eproto;
};// -------------------------------------------------------------------

class DeviceNameListRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:device_service.DeviceNameListRequest) */ {
 public:
  inline DeviceNameListRequest() : DeviceNameListRequest(nullptr) {}
  ~DeviceNameListRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceNameListRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeviceNameListRequest(const DeviceNameListRequest& from)
      : DeviceNameListRequest(nullptr, from) {}
  DeviceNameListRequest(DeviceNameListRequest&& from) noexcept
    : DeviceNameListRequest() {
    *this = ::std::move(from);
  }

  inline DeviceNameListRequest& operator=(const DeviceNameListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceNameListRequest& operator=(DeviceNameListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceNameListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceNameListRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceNameListRequest*>(
               &_DeviceNameListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceNameListRequest& a, DeviceNameListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceNameListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceNameListRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceNameListRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceNameListRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceNameListRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceNameListRequest& from) {
    DeviceNameListRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceNameListRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "device_service.DeviceNameListRequest";
  }
  protected:
  explicit DeviceNameListRequest(::google::protobuf::Arena* arena);
  DeviceNameListRequest(::google::protobuf::Arena* arena, const DeviceNameListRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
  };
  // string device_name = 1;
  void clear_device_name() ;
  const std::string& device_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_name(Arg_&& arg, Args_... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* value);

  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(
      const std::string& value);
  std::string* _internal_mutable_device_name();

  public:
  // @@protoc_insertion_point(class_scope:device_service.DeviceNameListRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr device_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2eproto;
};// -------------------------------------------------------------------

class DeviceInfoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:device_service.DeviceInfoRequest) */ {
 public:
  inline DeviceInfoRequest() : DeviceInfoRequest(nullptr) {}
  ~DeviceInfoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceInfoRequest(::google::protobuf::internal::ConstantInitialized);

  inline DeviceInfoRequest(const DeviceInfoRequest& from)
      : DeviceInfoRequest(nullptr, from) {}
  DeviceInfoRequest(DeviceInfoRequest&& from) noexcept
    : DeviceInfoRequest() {
    *this = ::std::move(from);
  }

  inline DeviceInfoRequest& operator=(const DeviceInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfoRequest& operator=(DeviceInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceInfoRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceInfoRequest*>(
               &_DeviceInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeviceInfoRequest& a, DeviceInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceInfoRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceInfoRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceInfoRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceInfoRequest& from) {
    DeviceInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceInfoRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "device_service.DeviceInfoRequest";
  }
  protected:
  explicit DeviceInfoRequest(::google::protobuf::Arena* arena);
  DeviceInfoRequest(::google::protobuf::Arena* arena, const DeviceInfoRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
  };
  // string device_name = 1;
  void clear_device_name() ;
  const std::string& device_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_name(Arg_&& arg, Args_... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* value);

  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(
      const std::string& value);
  std::string* _internal_mutable_device_name();

  public:
  // @@protoc_insertion_point(class_scope:device_service.DeviceInfoRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      52, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr device_name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2eproto;
};// -------------------------------------------------------------------

class DeviceInfoDetail final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:device_service.DeviceInfoDetail) */ {
 public:
  inline DeviceInfoDetail() : DeviceInfoDetail(nullptr) {}
  ~DeviceInfoDetail() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceInfoDetail(::google::protobuf::internal::ConstantInitialized);

  inline DeviceInfoDetail(const DeviceInfoDetail& from)
      : DeviceInfoDetail(nullptr, from) {}
  DeviceInfoDetail(DeviceInfoDetail&& from) noexcept
    : DeviceInfoDetail() {
    *this = ::std::move(from);
  }

  inline DeviceInfoDetail& operator=(const DeviceInfoDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfoDetail& operator=(DeviceInfoDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceInfoDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceInfoDetail* internal_default_instance() {
    return reinterpret_cast<const DeviceInfoDetail*>(
               &_DeviceInfoDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeviceInfoDetail& a, DeviceInfoDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfoDetail* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceInfoDetail* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceInfoDetail* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceInfoDetail>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceInfoDetail& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceInfoDetail& from) {
    DeviceInfoDetail::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceInfoDetail* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "device_service.DeviceInfoDetail";
  }
  protected:
  explicit DeviceInfoDetail(::google::protobuf::Arena* arena);
  DeviceInfoDetail(::google::protobuf::Arena* arena, const DeviceInfoDetail& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kTypeFieldNumber = 3,
    kPortFieldNumber = 2,
    kServerStatusFieldNumber = 4,
    kSimulateStatusFieldNumber = 5,
    kPlanStatusFieldNumber = 6,
  };
  // string ip = 1;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* value);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // string type = 3;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // int32 port = 2;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // bool server_status = 4;
  void clear_server_status() ;
  bool server_status() const;
  void set_server_status(bool value);

  private:
  bool _internal_server_status() const;
  void _internal_set_server_status(bool value);

  public:
  // bool simulate_status = 5;
  void clear_simulate_status() ;
  bool simulate_status() const;
  void set_simulate_status(bool value);

  private:
  bool _internal_simulate_status() const;
  void _internal_set_simulate_status(bool value);

  public:
  // bool plan_status = 6;
  void clear_plan_status() ;
  bool plan_status() const;
  void set_plan_status(bool value);

  private:
  bool _internal_plan_status() const;
  void _internal_set_plan_status(bool value);

  public:
  // @@protoc_insertion_point(class_scope:device_service.DeviceInfoDetail)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      46, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::int32_t port_;
    bool server_status_;
    bool simulate_status_;
    bool plan_status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2eproto;
};// -------------------------------------------------------------------

class DeviceTableBySlaveIdResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:device_service.DeviceTableBySlaveIdResponse) */ {
 public:
  inline DeviceTableBySlaveIdResponse() : DeviceTableBySlaveIdResponse(nullptr) {}
  ~DeviceTableBySlaveIdResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceTableBySlaveIdResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeviceTableBySlaveIdResponse(const DeviceTableBySlaveIdResponse& from)
      : DeviceTableBySlaveIdResponse(nullptr, from) {}
  DeviceTableBySlaveIdResponse(DeviceTableBySlaveIdResponse&& from) noexcept
    : DeviceTableBySlaveIdResponse() {
    *this = ::std::move(from);
  }

  inline DeviceTableBySlaveIdResponse& operator=(const DeviceTableBySlaveIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceTableBySlaveIdResponse& operator=(DeviceTableBySlaveIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceTableBySlaveIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceTableBySlaveIdResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceTableBySlaveIdResponse*>(
               &_DeviceTableBySlaveIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeviceTableBySlaveIdResponse& a, DeviceTableBySlaveIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceTableBySlaveIdResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceTableBySlaveIdResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceTableBySlaveIdResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceTableBySlaveIdResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceTableBySlaveIdResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceTableBySlaveIdResponse& from) {
    DeviceTableBySlaveIdResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceTableBySlaveIdResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "device_service.DeviceTableBySlaveIdResponse";
  }
  protected:
  explicit DeviceTableBySlaveIdResponse(::google::protobuf::Arena* arena);
  DeviceTableBySlaveIdResponse(::google::protobuf::Arena* arena, const DeviceTableBySlaveIdResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableDataFieldNumber = 2,
    kHeadDataFieldNumber = 1,
  };
  // repeated .device_service.DeviceTableRow table_data = 2;
  int table_data_size() const;
  private:
  int _internal_table_data_size() const;

  public:
  void clear_table_data() ;
  ::device_service::DeviceTableRow* mutable_table_data(int index);
  ::google::protobuf::RepeatedPtrField< ::device_service::DeviceTableRow >*
      mutable_table_data();
  private:
  const ::google::protobuf::RepeatedPtrField<::device_service::DeviceTableRow>& _internal_table_data() const;
  ::google::protobuf::RepeatedPtrField<::device_service::DeviceTableRow>* _internal_mutable_table_data();
  public:
  const ::device_service::DeviceTableRow& table_data(int index) const;
  ::device_service::DeviceTableRow* add_table_data();
  const ::google::protobuf::RepeatedPtrField< ::device_service::DeviceTableRow >&
      table_data() const;
  // .device_service.DeviceTableRow head_data = 1;
  bool has_head_data() const;
  void clear_head_data() ;
  const ::device_service::DeviceTableRow& head_data() const;
  PROTOBUF_NODISCARD ::device_service::DeviceTableRow* release_head_data();
  ::device_service::DeviceTableRow* mutable_head_data();
  void set_allocated_head_data(::device_service::DeviceTableRow* value);
  void unsafe_arena_set_allocated_head_data(::device_service::DeviceTableRow* value);
  ::device_service::DeviceTableRow* unsafe_arena_release_head_data();

  private:
  const ::device_service::DeviceTableRow& _internal_head_data() const;
  ::device_service::DeviceTableRow* _internal_mutable_head_data();

  public:
  // @@protoc_insertion_point(class_scope:device_service.DeviceTableBySlaveIdResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::device_service::DeviceTableRow > table_data_;
    ::device_service::DeviceTableRow* head_data_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2eproto;
};// -------------------------------------------------------------------

class DeviceInfoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:device_service.DeviceInfoResponse) */ {
 public:
  inline DeviceInfoResponse() : DeviceInfoResponse(nullptr) {}
  ~DeviceInfoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DeviceInfoResponse(::google::protobuf::internal::ConstantInitialized);

  inline DeviceInfoResponse(const DeviceInfoResponse& from)
      : DeviceInfoResponse(nullptr, from) {}
  DeviceInfoResponse(DeviceInfoResponse&& from) noexcept
    : DeviceInfoResponse() {
    *this = ::std::move(from);
  }

  inline DeviceInfoResponse& operator=(const DeviceInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfoResponse& operator=(DeviceInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceInfoResponse* internal_default_instance() {
    return reinterpret_cast<const DeviceInfoResponse*>(
               &_DeviceInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeviceInfoResponse& a, DeviceInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceInfoResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceInfoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DeviceInfoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DeviceInfoResponse& from) {
    DeviceInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(DeviceInfoResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "device_service.DeviceInfoResponse";
  }
  protected:
  explicit DeviceInfoResponse(::google::protobuf::Arena* arena);
  DeviceInfoResponse(::google::protobuf::Arena* arena, const DeviceInfoResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // .device_service.DeviceInfoDetail info = 1;
  bool has_info() const;
  void clear_info() ;
  const ::device_service::DeviceInfoDetail& info() const;
  PROTOBUF_NODISCARD ::device_service::DeviceInfoDetail* release_info();
  ::device_service::DeviceInfoDetail* mutable_info();
  void set_allocated_info(::device_service::DeviceInfoDetail* value);
  void unsafe_arena_set_allocated_info(::device_service::DeviceInfoDetail* value);
  ::device_service::DeviceInfoDetail* unsafe_arena_release_info();

  private:
  const ::device_service::DeviceInfoDetail& _internal_info() const;
  ::device_service::DeviceInfoDetail* _internal_mutable_info();

  public:
  // @@protoc_insertion_point(class_scope:device_service.DeviceInfoResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::device_service::DeviceInfoDetail* info_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DeviceNameListRequest

// string device_name = 1;
inline void DeviceNameListRequest::clear_device_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_name_.ClearToEmpty();
}
inline const std::string& DeviceNameListRequest::device_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:device_service.DeviceNameListRequest.device_name)
  return _internal_device_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceNameListRequest::set_device_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:device_service.DeviceNameListRequest.device_name)
}
inline std::string* DeviceNameListRequest::mutable_device_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:device_service.DeviceNameListRequest.device_name)
  return _s;
}
inline const std::string& DeviceNameListRequest::_internal_device_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_name_.Get();
}
inline void DeviceNameListRequest::_internal_set_device_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_name_.Set(value, GetArena());
}
inline std::string* DeviceNameListRequest::_internal_mutable_device_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.device_name_.Mutable( GetArena());
}
inline std::string* DeviceNameListRequest::release_device_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:device_service.DeviceNameListRequest.device_name)
  return _impl_.device_name_.Release();
}
inline void DeviceNameListRequest::set_allocated_device_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_name_.IsDefault()) {
          _impl_.device_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:device_service.DeviceNameListRequest.device_name)
}

// -------------------------------------------------------------------

// DeviceNameListResponse

// repeated string device_names = 1;
inline int DeviceNameListResponse::_internal_device_names_size() const {
  return _internal_device_names().size();
}
inline int DeviceNameListResponse::device_names_size() const {
  return _internal_device_names_size();
}
inline void DeviceNameListResponse::clear_device_names() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_names_.Clear();
}
inline std::string* DeviceNameListResponse::add_device_names()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_device_names()->Add();
  // @@protoc_insertion_point(field_add_mutable:device_service.DeviceNameListResponse.device_names)
  return _s;
}
inline const std::string& DeviceNameListResponse::device_names(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:device_service.DeviceNameListResponse.device_names)
  return _internal_device_names().Get(index);
}
inline std::string* DeviceNameListResponse::mutable_device_names(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:device_service.DeviceNameListResponse.device_names)
  return _internal_mutable_device_names()->Mutable(index);
}
inline void DeviceNameListResponse::set_device_names(int index, const std::string& value) {
  _internal_mutable_device_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:device_service.DeviceNameListResponse.device_names)
}
inline void DeviceNameListResponse::set_device_names(int index, std::string&& value) {
  _internal_mutable_device_names()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:device_service.DeviceNameListResponse.device_names)
}
inline void DeviceNameListResponse::set_device_names(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_device_names()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:device_service.DeviceNameListResponse.device_names)
}
inline void DeviceNameListResponse::set_device_names(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_device_names()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:device_service.DeviceNameListResponse.device_names)
}
inline void DeviceNameListResponse::set_device_names(int index, absl::string_view value) {
  _internal_mutable_device_names()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:device_service.DeviceNameListResponse.device_names)
}
inline void DeviceNameListResponse::add_device_names(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_device_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:device_service.DeviceNameListResponse.device_names)
}
inline void DeviceNameListResponse::add_device_names(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_device_names()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:device_service.DeviceNameListResponse.device_names)
}
inline void DeviceNameListResponse::add_device_names(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_device_names()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:device_service.DeviceNameListResponse.device_names)
}
inline void DeviceNameListResponse::add_device_names(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_device_names()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:device_service.DeviceNameListResponse.device_names)
}
inline void DeviceNameListResponse::add_device_names(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_device_names()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:device_service.DeviceNameListResponse.device_names)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DeviceNameListResponse::device_names() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:device_service.DeviceNameListResponse.device_names)
  return _internal_device_names();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DeviceNameListResponse::mutable_device_names() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:device_service.DeviceNameListResponse.device_names)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_device_names();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DeviceNameListResponse::_internal_device_names() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_names_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DeviceNameListResponse::_internal_mutable_device_names() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.device_names_;
}

// -------------------------------------------------------------------

// DeviceInfoDetail

// string ip = 1;
inline void DeviceInfoDetail::clear_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& DeviceInfoDetail::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:device_service.DeviceInfoDetail.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceInfoDetail::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:device_service.DeviceInfoDetail.ip)
}
inline std::string* DeviceInfoDetail::mutable_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:device_service.DeviceInfoDetail.ip)
  return _s;
}
inline const std::string& DeviceInfoDetail::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void DeviceInfoDetail::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* DeviceInfoDetail::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* DeviceInfoDetail::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:device_service.DeviceInfoDetail.ip)
  return _impl_.ip_.Release();
}
inline void DeviceInfoDetail::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:device_service.DeviceInfoDetail.ip)
}

// int32 port = 2;
inline void DeviceInfoDetail::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0;
}
inline ::int32_t DeviceInfoDetail::port() const {
  // @@protoc_insertion_point(field_get:device_service.DeviceInfoDetail.port)
  return _internal_port();
}
inline void DeviceInfoDetail::set_port(::int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:device_service.DeviceInfoDetail.port)
}
inline ::int32_t DeviceInfoDetail::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void DeviceInfoDetail::_internal_set_port(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.port_ = value;
}

// string type = 3;
inline void DeviceInfoDetail::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& DeviceInfoDetail::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:device_service.DeviceInfoDetail.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceInfoDetail::set_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:device_service.DeviceInfoDetail.type)
}
inline std::string* DeviceInfoDetail::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:device_service.DeviceInfoDetail.type)
  return _s;
}
inline const std::string& DeviceInfoDetail::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.type_.Get();
}
inline void DeviceInfoDetail::_internal_set_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_.Set(value, GetArena());
}
inline std::string* DeviceInfoDetail::_internal_mutable_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* DeviceInfoDetail::release_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:device_service.DeviceInfoDetail.type)
  return _impl_.type_.Release();
}
inline void DeviceInfoDetail::set_allocated_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.type_.IsDefault()) {
          _impl_.type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:device_service.DeviceInfoDetail.type)
}

// bool server_status = 4;
inline void DeviceInfoDetail::clear_server_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.server_status_ = false;
}
inline bool DeviceInfoDetail::server_status() const {
  // @@protoc_insertion_point(field_get:device_service.DeviceInfoDetail.server_status)
  return _internal_server_status();
}
inline void DeviceInfoDetail::set_server_status(bool value) {
  _internal_set_server_status(value);
  // @@protoc_insertion_point(field_set:device_service.DeviceInfoDetail.server_status)
}
inline bool DeviceInfoDetail::_internal_server_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.server_status_;
}
inline void DeviceInfoDetail::_internal_set_server_status(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.server_status_ = value;
}

// bool simulate_status = 5;
inline void DeviceInfoDetail::clear_simulate_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.simulate_status_ = false;
}
inline bool DeviceInfoDetail::simulate_status() const {
  // @@protoc_insertion_point(field_get:device_service.DeviceInfoDetail.simulate_status)
  return _internal_simulate_status();
}
inline void DeviceInfoDetail::set_simulate_status(bool value) {
  _internal_set_simulate_status(value);
  // @@protoc_insertion_point(field_set:device_service.DeviceInfoDetail.simulate_status)
}
inline bool DeviceInfoDetail::_internal_simulate_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.simulate_status_;
}
inline void DeviceInfoDetail::_internal_set_simulate_status(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.simulate_status_ = value;
}

// bool plan_status = 6;
inline void DeviceInfoDetail::clear_plan_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.plan_status_ = false;
}
inline bool DeviceInfoDetail::plan_status() const {
  // @@protoc_insertion_point(field_get:device_service.DeviceInfoDetail.plan_status)
  return _internal_plan_status();
}
inline void DeviceInfoDetail::set_plan_status(bool value) {
  _internal_set_plan_status(value);
  // @@protoc_insertion_point(field_set:device_service.DeviceInfoDetail.plan_status)
}
inline bool DeviceInfoDetail::_internal_plan_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.plan_status_;
}
inline void DeviceInfoDetail::_internal_set_plan_status(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.plan_status_ = value;
}

// -------------------------------------------------------------------

// DeviceInfoRequest

// string device_name = 1;
inline void DeviceInfoRequest::clear_device_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_name_.ClearToEmpty();
}
inline const std::string& DeviceInfoRequest::device_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:device_service.DeviceInfoRequest.device_name)
  return _internal_device_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceInfoRequest::set_device_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:device_service.DeviceInfoRequest.device_name)
}
inline std::string* DeviceInfoRequest::mutable_device_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:device_service.DeviceInfoRequest.device_name)
  return _s;
}
inline const std::string& DeviceInfoRequest::_internal_device_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_name_.Get();
}
inline void DeviceInfoRequest::_internal_set_device_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_name_.Set(value, GetArena());
}
inline std::string* DeviceInfoRequest::_internal_mutable_device_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.device_name_.Mutable( GetArena());
}
inline std::string* DeviceInfoRequest::release_device_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:device_service.DeviceInfoRequest.device_name)
  return _impl_.device_name_.Release();
}
inline void DeviceInfoRequest::set_allocated_device_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_name_.IsDefault()) {
          _impl_.device_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:device_service.DeviceInfoRequest.device_name)
}

// -------------------------------------------------------------------

// DeviceInfoResponse

// .device_service.DeviceInfoDetail info = 1;
inline bool DeviceInfoResponse::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline void DeviceInfoResponse::clear_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::device_service::DeviceInfoDetail& DeviceInfoResponse::_internal_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::device_service::DeviceInfoDetail* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::device_service::DeviceInfoDetail&>(::device_service::_DeviceInfoDetail_default_instance_);
}
inline const ::device_service::DeviceInfoDetail& DeviceInfoResponse::info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:device_service.DeviceInfoResponse.info)
  return _internal_info();
}
inline void DeviceInfoResponse::unsafe_arena_set_allocated_info(::device_service::DeviceInfoDetail* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = reinterpret_cast<::device_service::DeviceInfoDetail*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:device_service.DeviceInfoResponse.info)
}
inline ::device_service::DeviceInfoDetail* DeviceInfoResponse::release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::device_service::DeviceInfoDetail* released = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::device_service::DeviceInfoDetail* DeviceInfoResponse::unsafe_arena_release_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:device_service.DeviceInfoResponse.info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::device_service::DeviceInfoDetail* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::device_service::DeviceInfoDetail* DeviceInfoResponse::_internal_mutable_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::device_service::DeviceInfoDetail>(GetArena());
    _impl_.info_ = reinterpret_cast<::device_service::DeviceInfoDetail*>(p);
  }
  return _impl_.info_;
}
inline ::device_service::DeviceInfoDetail* DeviceInfoResponse::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::device_service::DeviceInfoDetail* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:device_service.DeviceInfoResponse.info)
  return _msg;
}
inline void DeviceInfoResponse::set_allocated_info(::device_service::DeviceInfoDetail* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::device_service::DeviceInfoDetail*>(_impl_.info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::device_service::DeviceInfoDetail*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.info_ = reinterpret_cast<::device_service::DeviceInfoDetail*>(value);
  // @@protoc_insertion_point(field_set_allocated:device_service.DeviceInfoResponse.info)
}

// -------------------------------------------------------------------

// DeviceSlaveCntRequest

// string device_name = 1;
inline void DeviceSlaveCntRequest::clear_device_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_name_.ClearToEmpty();
}
inline const std::string& DeviceSlaveCntRequest::device_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:device_service.DeviceSlaveCntRequest.device_name)
  return _internal_device_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceSlaveCntRequest::set_device_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:device_service.DeviceSlaveCntRequest.device_name)
}
inline std::string* DeviceSlaveCntRequest::mutable_device_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:device_service.DeviceSlaveCntRequest.device_name)
  return _s;
}
inline const std::string& DeviceSlaveCntRequest::_internal_device_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_name_.Get();
}
inline void DeviceSlaveCntRequest::_internal_set_device_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_name_.Set(value, GetArena());
}
inline std::string* DeviceSlaveCntRequest::_internal_mutable_device_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.device_name_.Mutable( GetArena());
}
inline std::string* DeviceSlaveCntRequest::release_device_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:device_service.DeviceSlaveCntRequest.device_name)
  return _impl_.device_name_.Release();
}
inline void DeviceSlaveCntRequest::set_allocated_device_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_name_.IsDefault()) {
          _impl_.device_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:device_service.DeviceSlaveCntRequest.device_name)
}

// -------------------------------------------------------------------

// DeviceSlaveCntResponse

// int32 slave_cnt = 1;
inline void DeviceSlaveCntResponse::clear_slave_cnt() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.slave_cnt_ = 0;
}
inline ::int32_t DeviceSlaveCntResponse::slave_cnt() const {
  // @@protoc_insertion_point(field_get:device_service.DeviceSlaveCntResponse.slave_cnt)
  return _internal_slave_cnt();
}
inline void DeviceSlaveCntResponse::set_slave_cnt(::int32_t value) {
  _internal_set_slave_cnt(value);
  // @@protoc_insertion_point(field_set:device_service.DeviceSlaveCntResponse.slave_cnt)
}
inline ::int32_t DeviceSlaveCntResponse::_internal_slave_cnt() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.slave_cnt_;
}
inline void DeviceSlaveCntResponse::_internal_set_slave_cnt(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.slave_cnt_ = value;
}

// -------------------------------------------------------------------

// DeviceTableBySlaveIdRequest

// string device_name = 1;
inline void DeviceTableBySlaveIdRequest::clear_device_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_name_.ClearToEmpty();
}
inline const std::string& DeviceTableBySlaveIdRequest::device_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:device_service.DeviceTableBySlaveIdRequest.device_name)
  return _internal_device_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceTableBySlaveIdRequest::set_device_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:device_service.DeviceTableBySlaveIdRequest.device_name)
}
inline std::string* DeviceTableBySlaveIdRequest::mutable_device_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:device_service.DeviceTableBySlaveIdRequest.device_name)
  return _s;
}
inline const std::string& DeviceTableBySlaveIdRequest::_internal_device_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.device_name_.Get();
}
inline void DeviceTableBySlaveIdRequest::_internal_set_device_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.device_name_.Set(value, GetArena());
}
inline std::string* DeviceTableBySlaveIdRequest::_internal_mutable_device_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.device_name_.Mutable( GetArena());
}
inline std::string* DeviceTableBySlaveIdRequest::release_device_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:device_service.DeviceTableBySlaveIdRequest.device_name)
  return _impl_.device_name_.Release();
}
inline void DeviceTableBySlaveIdRequest::set_allocated_device_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.device_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_name_.IsDefault()) {
          _impl_.device_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:device_service.DeviceTableBySlaveIdRequest.device_name)
}

// int32 slave_id = 2;
inline void DeviceTableBySlaveIdRequest::clear_slave_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.slave_id_ = 0;
}
inline ::int32_t DeviceTableBySlaveIdRequest::slave_id() const {
  // @@protoc_insertion_point(field_get:device_service.DeviceTableBySlaveIdRequest.slave_id)
  return _internal_slave_id();
}
inline void DeviceTableBySlaveIdRequest::set_slave_id(::int32_t value) {
  _internal_set_slave_id(value);
  // @@protoc_insertion_point(field_set:device_service.DeviceTableBySlaveIdRequest.slave_id)
}
inline ::int32_t DeviceTableBySlaveIdRequest::_internal_slave_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.slave_id_;
}
inline void DeviceTableBySlaveIdRequest::_internal_set_slave_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.slave_id_ = value;
}

// string point_name = 3;
inline void DeviceTableBySlaveIdRequest::clear_point_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.point_name_.ClearToEmpty();
}
inline const std::string& DeviceTableBySlaveIdRequest::point_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:device_service.DeviceTableBySlaveIdRequest.point_name)
  return _internal_point_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceTableBySlaveIdRequest::set_point_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.point_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:device_service.DeviceTableBySlaveIdRequest.point_name)
}
inline std::string* DeviceTableBySlaveIdRequest::mutable_point_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_point_name();
  // @@protoc_insertion_point(field_mutable:device_service.DeviceTableBySlaveIdRequest.point_name)
  return _s;
}
inline const std::string& DeviceTableBySlaveIdRequest::_internal_point_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.point_name_.Get();
}
inline void DeviceTableBySlaveIdRequest::_internal_set_point_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.point_name_.Set(value, GetArena());
}
inline std::string* DeviceTableBySlaveIdRequest::_internal_mutable_point_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.point_name_.Mutable( GetArena());
}
inline std::string* DeviceTableBySlaveIdRequest::release_point_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:device_service.DeviceTableBySlaveIdRequest.point_name)
  return _impl_.point_name_.Release();
}
inline void DeviceTableBySlaveIdRequest::set_allocated_point_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.point_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.point_name_.IsDefault()) {
          _impl_.point_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:device_service.DeviceTableBySlaveIdRequest.point_name)
}

// -------------------------------------------------------------------

// DeviceTableRow

// repeated string row = 1;
inline int DeviceTableRow::_internal_row_size() const {
  return _internal_row().size();
}
inline int DeviceTableRow::row_size() const {
  return _internal_row_size();
}
inline void DeviceTableRow::clear_row() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.row_.Clear();
}
inline std::string* DeviceTableRow::add_row()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_row()->Add();
  // @@protoc_insertion_point(field_add_mutable:device_service.DeviceTableRow.row)
  return _s;
}
inline const std::string& DeviceTableRow::row(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:device_service.DeviceTableRow.row)
  return _internal_row().Get(index);
}
inline std::string* DeviceTableRow::mutable_row(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:device_service.DeviceTableRow.row)
  return _internal_mutable_row()->Mutable(index);
}
inline void DeviceTableRow::set_row(int index, const std::string& value) {
  _internal_mutable_row()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:device_service.DeviceTableRow.row)
}
inline void DeviceTableRow::set_row(int index, std::string&& value) {
  _internal_mutable_row()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:device_service.DeviceTableRow.row)
}
inline void DeviceTableRow::set_row(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_row()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:device_service.DeviceTableRow.row)
}
inline void DeviceTableRow::set_row(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_row()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:device_service.DeviceTableRow.row)
}
inline void DeviceTableRow::set_row(int index, absl::string_view value) {
  _internal_mutable_row()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:device_service.DeviceTableRow.row)
}
inline void DeviceTableRow::add_row(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_row()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:device_service.DeviceTableRow.row)
}
inline void DeviceTableRow::add_row(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_row()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:device_service.DeviceTableRow.row)
}
inline void DeviceTableRow::add_row(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_row()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:device_service.DeviceTableRow.row)
}
inline void DeviceTableRow::add_row(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_row()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:device_service.DeviceTableRow.row)
}
inline void DeviceTableRow::add_row(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_row()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:device_service.DeviceTableRow.row)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DeviceTableRow::row() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:device_service.DeviceTableRow.row)
  return _internal_row();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DeviceTableRow::mutable_row() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:device_service.DeviceTableRow.row)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_row();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
DeviceTableRow::_internal_row() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.row_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
DeviceTableRow::_internal_mutable_row() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.row_;
}

// -------------------------------------------------------------------

// DeviceTableBySlaveIdResponse

// .device_service.DeviceTableRow head_data = 1;
inline bool DeviceTableBySlaveIdResponse::has_head_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.head_data_ != nullptr);
  return value;
}
inline void DeviceTableBySlaveIdResponse::clear_head_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.head_data_ != nullptr) _impl_.head_data_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::device_service::DeviceTableRow& DeviceTableBySlaveIdResponse::_internal_head_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::device_service::DeviceTableRow* p = _impl_.head_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::device_service::DeviceTableRow&>(::device_service::_DeviceTableRow_default_instance_);
}
inline const ::device_service::DeviceTableRow& DeviceTableBySlaveIdResponse::head_data() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:device_service.DeviceTableBySlaveIdResponse.head_data)
  return _internal_head_data();
}
inline void DeviceTableBySlaveIdResponse::unsafe_arena_set_allocated_head_data(::device_service::DeviceTableRow* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.head_data_);
  }
  _impl_.head_data_ = reinterpret_cast<::device_service::DeviceTableRow*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:device_service.DeviceTableBySlaveIdResponse.head_data)
}
inline ::device_service::DeviceTableRow* DeviceTableBySlaveIdResponse::release_head_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::device_service::DeviceTableRow* released = _impl_.head_data_;
  _impl_.head_data_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::device_service::DeviceTableRow* DeviceTableBySlaveIdResponse::unsafe_arena_release_head_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:device_service.DeviceTableBySlaveIdResponse.head_data)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::device_service::DeviceTableRow* temp = _impl_.head_data_;
  _impl_.head_data_ = nullptr;
  return temp;
}
inline ::device_service::DeviceTableRow* DeviceTableBySlaveIdResponse::_internal_mutable_head_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.head_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::device_service::DeviceTableRow>(GetArena());
    _impl_.head_data_ = reinterpret_cast<::device_service::DeviceTableRow*>(p);
  }
  return _impl_.head_data_;
}
inline ::device_service::DeviceTableRow* DeviceTableBySlaveIdResponse::mutable_head_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::device_service::DeviceTableRow* _msg = _internal_mutable_head_data();
  // @@protoc_insertion_point(field_mutable:device_service.DeviceTableBySlaveIdResponse.head_data)
  return _msg;
}
inline void DeviceTableBySlaveIdResponse::set_allocated_head_data(::device_service::DeviceTableRow* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::device_service::DeviceTableRow*>(_impl_.head_data_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::device_service::DeviceTableRow*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.head_data_ = reinterpret_cast<::device_service::DeviceTableRow*>(value);
  // @@protoc_insertion_point(field_set_allocated:device_service.DeviceTableBySlaveIdResponse.head_data)
}

// repeated .device_service.DeviceTableRow table_data = 2;
inline int DeviceTableBySlaveIdResponse::_internal_table_data_size() const {
  return _internal_table_data().size();
}
inline int DeviceTableBySlaveIdResponse::table_data_size() const {
  return _internal_table_data_size();
}
inline void DeviceTableBySlaveIdResponse::clear_table_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.table_data_.Clear();
}
inline ::device_service::DeviceTableRow* DeviceTableBySlaveIdResponse::mutable_table_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:device_service.DeviceTableBySlaveIdResponse.table_data)
  return _internal_mutable_table_data()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::device_service::DeviceTableRow>* DeviceTableBySlaveIdResponse::mutable_table_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:device_service.DeviceTableBySlaveIdResponse.table_data)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_table_data();
}
inline const ::device_service::DeviceTableRow& DeviceTableBySlaveIdResponse::table_data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:device_service.DeviceTableBySlaveIdResponse.table_data)
  return _internal_table_data().Get(index);
}
inline ::device_service::DeviceTableRow* DeviceTableBySlaveIdResponse::add_table_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::device_service::DeviceTableRow* _add = _internal_mutable_table_data()->Add();
  // @@protoc_insertion_point(field_add:device_service.DeviceTableBySlaveIdResponse.table_data)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::device_service::DeviceTableRow>& DeviceTableBySlaveIdResponse::table_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:device_service.DeviceTableBySlaveIdResponse.table_data)
  return _internal_table_data();
}
inline const ::google::protobuf::RepeatedPtrField<::device_service::DeviceTableRow>&
DeviceTableBySlaveIdResponse::_internal_table_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.table_data_;
}
inline ::google::protobuf::RepeatedPtrField<::device_service::DeviceTableRow>*
DeviceTableBySlaveIdResponse::_internal_mutable_table_data() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.table_data_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace device_service


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_device_2eproto_2epb_2eh
