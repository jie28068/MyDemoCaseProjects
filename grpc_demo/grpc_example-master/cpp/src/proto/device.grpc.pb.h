// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: device.proto
#ifndef GRPC_device_2eproto__INCLUDED
#define GRPC_device_2eproto__INCLUDED

#include "device.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace device_service {

class DeviceService final {
 public:
  static constexpr char const* service_full_name() {
    return "device_service.DeviceService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 返回一维字符串数组
    virtual ::grpc::Status GetDeviceStringList(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest& request, ::device_service::DeviceNameListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceNameListResponse>> AsyncGetDeviceStringList(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceNameListResponse>>(AsyncGetDeviceStringListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceNameListResponse>> PrepareAsyncGetDeviceStringList(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceNameListResponse>>(PrepareAsyncGetDeviceStringListRaw(context, request, cq));
    }
    // 返回单个int值
    virtual ::grpc::Status GetDeviceSlaveCnt(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest& request, ::device_service::DeviceSlaveCntResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceSlaveCntResponse>> AsyncGetDeviceSlaveCnt(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceSlaveCntResponse>>(AsyncGetDeviceSlaveCntRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceSlaveCntResponse>> PrepareAsyncGetDeviceSlaveCnt(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceSlaveCntResponse>>(PrepareAsyncGetDeviceSlaveCntRaw(context, request, cq));
    }
    // 返回自定义结构体类型
    virtual ::grpc::Status GetDeviceInfo(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest& request, ::device_service::DeviceInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceInfoResponse>> AsyncGetDeviceInfo(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceInfoResponse>>(AsyncGetDeviceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceInfoResponse>> PrepareAsyncGetDeviceInfo(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceInfoResponse>>(PrepareAsyncGetDeviceInfoRaw(context, request, cq));
    }
    // 返回二维字符串数组
    virtual ::grpc::Status GetDeviceTableBySlaveId(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest& request, ::device_service::DeviceTableBySlaveIdResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceTableBySlaveIdResponse>> AsyncGetDeviceTableBySlaveId(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceTableBySlaveIdResponse>>(AsyncGetDeviceTableBySlaveIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceTableBySlaveIdResponse>> PrepareAsyncGetDeviceTableBySlaveId(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceTableBySlaveIdResponse>>(PrepareAsyncGetDeviceTableBySlaveIdRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 返回一维字符串数组
      virtual void GetDeviceStringList(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest* request, ::device_service::DeviceNameListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDeviceStringList(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest* request, ::device_service::DeviceNameListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 返回单个int值
      virtual void GetDeviceSlaveCnt(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest* request, ::device_service::DeviceSlaveCntResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDeviceSlaveCnt(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest* request, ::device_service::DeviceSlaveCntResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 返回自定义结构体类型
      virtual void GetDeviceInfo(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest* request, ::device_service::DeviceInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDeviceInfo(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest* request, ::device_service::DeviceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // 返回二维字符串数组
      virtual void GetDeviceTableBySlaveId(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest* request, ::device_service::DeviceTableBySlaveIdResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDeviceTableBySlaveId(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest* request, ::device_service::DeviceTableBySlaveIdResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceNameListResponse>* AsyncGetDeviceStringListRaw(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceNameListResponse>* PrepareAsyncGetDeviceStringListRaw(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceSlaveCntResponse>* AsyncGetDeviceSlaveCntRaw(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceSlaveCntResponse>* PrepareAsyncGetDeviceSlaveCntRaw(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceInfoResponse>* AsyncGetDeviceInfoRaw(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceInfoResponse>* PrepareAsyncGetDeviceInfoRaw(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceTableBySlaveIdResponse>* AsyncGetDeviceTableBySlaveIdRaw(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::device_service::DeviceTableBySlaveIdResponse>* PrepareAsyncGetDeviceTableBySlaveIdRaw(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetDeviceStringList(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest& request, ::device_service::DeviceNameListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device_service::DeviceNameListResponse>> AsyncGetDeviceStringList(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device_service::DeviceNameListResponse>>(AsyncGetDeviceStringListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device_service::DeviceNameListResponse>> PrepareAsyncGetDeviceStringList(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device_service::DeviceNameListResponse>>(PrepareAsyncGetDeviceStringListRaw(context, request, cq));
    }
    ::grpc::Status GetDeviceSlaveCnt(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest& request, ::device_service::DeviceSlaveCntResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device_service::DeviceSlaveCntResponse>> AsyncGetDeviceSlaveCnt(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device_service::DeviceSlaveCntResponse>>(AsyncGetDeviceSlaveCntRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device_service::DeviceSlaveCntResponse>> PrepareAsyncGetDeviceSlaveCnt(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device_service::DeviceSlaveCntResponse>>(PrepareAsyncGetDeviceSlaveCntRaw(context, request, cq));
    }
    ::grpc::Status GetDeviceInfo(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest& request, ::device_service::DeviceInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device_service::DeviceInfoResponse>> AsyncGetDeviceInfo(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device_service::DeviceInfoResponse>>(AsyncGetDeviceInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device_service::DeviceInfoResponse>> PrepareAsyncGetDeviceInfo(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device_service::DeviceInfoResponse>>(PrepareAsyncGetDeviceInfoRaw(context, request, cq));
    }
    ::grpc::Status GetDeviceTableBySlaveId(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest& request, ::device_service::DeviceTableBySlaveIdResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device_service::DeviceTableBySlaveIdResponse>> AsyncGetDeviceTableBySlaveId(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device_service::DeviceTableBySlaveIdResponse>>(AsyncGetDeviceTableBySlaveIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device_service::DeviceTableBySlaveIdResponse>> PrepareAsyncGetDeviceTableBySlaveId(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::device_service::DeviceTableBySlaveIdResponse>>(PrepareAsyncGetDeviceTableBySlaveIdRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetDeviceStringList(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest* request, ::device_service::DeviceNameListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDeviceStringList(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest* request, ::device_service::DeviceNameListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDeviceSlaveCnt(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest* request, ::device_service::DeviceSlaveCntResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDeviceSlaveCnt(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest* request, ::device_service::DeviceSlaveCntResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDeviceInfo(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest* request, ::device_service::DeviceInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDeviceInfo(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest* request, ::device_service::DeviceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDeviceTableBySlaveId(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest* request, ::device_service::DeviceTableBySlaveIdResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDeviceTableBySlaveId(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest* request, ::device_service::DeviceTableBySlaveIdResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::device_service::DeviceNameListResponse>* AsyncGetDeviceStringListRaw(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::device_service::DeviceNameListResponse>* PrepareAsyncGetDeviceStringListRaw(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::device_service::DeviceSlaveCntResponse>* AsyncGetDeviceSlaveCntRaw(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::device_service::DeviceSlaveCntResponse>* PrepareAsyncGetDeviceSlaveCntRaw(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::device_service::DeviceInfoResponse>* AsyncGetDeviceInfoRaw(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::device_service::DeviceInfoResponse>* PrepareAsyncGetDeviceInfoRaw(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::device_service::DeviceTableBySlaveIdResponse>* AsyncGetDeviceTableBySlaveIdRaw(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::device_service::DeviceTableBySlaveIdResponse>* PrepareAsyncGetDeviceTableBySlaveIdRaw(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeviceStringList_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeviceSlaveCnt_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeviceInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDeviceTableBySlaveId_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 返回一维字符串数组
    virtual ::grpc::Status GetDeviceStringList(::grpc::ServerContext* context, const ::device_service::DeviceNameListRequest* request, ::device_service::DeviceNameListResponse* response);
    // 返回单个int值
    virtual ::grpc::Status GetDeviceSlaveCnt(::grpc::ServerContext* context, const ::device_service::DeviceSlaveCntRequest* request, ::device_service::DeviceSlaveCntResponse* response);
    // 返回自定义结构体类型
    virtual ::grpc::Status GetDeviceInfo(::grpc::ServerContext* context, const ::device_service::DeviceInfoRequest* request, ::device_service::DeviceInfoResponse* response);
    // 返回二维字符串数组
    virtual ::grpc::Status GetDeviceTableBySlaveId(::grpc::ServerContext* context, const ::device_service::DeviceTableBySlaveIdRequest* request, ::device_service::DeviceTableBySlaveIdResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeviceStringList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDeviceStringList() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetDeviceStringList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceStringList(::grpc::ServerContext* /*context*/, const ::device_service::DeviceNameListRequest* /*request*/, ::device_service::DeviceNameListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceStringList(::grpc::ServerContext* context, ::device_service::DeviceNameListRequest* request, ::grpc::ServerAsyncResponseWriter< ::device_service::DeviceNameListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeviceSlaveCnt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDeviceSlaveCnt() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetDeviceSlaveCnt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceSlaveCnt(::grpc::ServerContext* /*context*/, const ::device_service::DeviceSlaveCntRequest* /*request*/, ::device_service::DeviceSlaveCntResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceSlaveCnt(::grpc::ServerContext* context, ::device_service::DeviceSlaveCntRequest* request, ::grpc::ServerAsyncResponseWriter< ::device_service::DeviceSlaveCntResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDeviceInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceInfo(::grpc::ServerContext* /*context*/, const ::device_service::DeviceInfoRequest* /*request*/, ::device_service::DeviceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceInfo(::grpc::ServerContext* context, ::device_service::DeviceInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::device_service::DeviceInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDeviceTableBySlaveId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDeviceTableBySlaveId() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetDeviceTableBySlaveId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceTableBySlaveId(::grpc::ServerContext* /*context*/, const ::device_service::DeviceTableBySlaveIdRequest* /*request*/, ::device_service::DeviceTableBySlaveIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceTableBySlaveId(::grpc::ServerContext* context, ::device_service::DeviceTableBySlaveIdRequest* request, ::grpc::ServerAsyncResponseWriter< ::device_service::DeviceTableBySlaveIdResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetDeviceStringList<WithAsyncMethod_GetDeviceSlaveCnt<WithAsyncMethod_GetDeviceInfo<WithAsyncMethod_GetDeviceTableBySlaveId<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetDeviceStringList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDeviceStringList() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::device_service::DeviceNameListRequest, ::device_service::DeviceNameListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::device_service::DeviceNameListRequest* request, ::device_service::DeviceNameListResponse* response) { return this->GetDeviceStringList(context, request, response); }));}
    void SetMessageAllocatorFor_GetDeviceStringList(
        ::grpc::MessageAllocator< ::device_service::DeviceNameListRequest, ::device_service::DeviceNameListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::device_service::DeviceNameListRequest, ::device_service::DeviceNameListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDeviceStringList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceStringList(::grpc::ServerContext* /*context*/, const ::device_service::DeviceNameListRequest* /*request*/, ::device_service::DeviceNameListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceStringList(
      ::grpc::CallbackServerContext* /*context*/, const ::device_service::DeviceNameListRequest* /*request*/, ::device_service::DeviceNameListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDeviceSlaveCnt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDeviceSlaveCnt() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::device_service::DeviceSlaveCntRequest, ::device_service::DeviceSlaveCntResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::device_service::DeviceSlaveCntRequest* request, ::device_service::DeviceSlaveCntResponse* response) { return this->GetDeviceSlaveCnt(context, request, response); }));}
    void SetMessageAllocatorFor_GetDeviceSlaveCnt(
        ::grpc::MessageAllocator< ::device_service::DeviceSlaveCntRequest, ::device_service::DeviceSlaveCntResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::device_service::DeviceSlaveCntRequest, ::device_service::DeviceSlaveCntResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDeviceSlaveCnt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceSlaveCnt(::grpc::ServerContext* /*context*/, const ::device_service::DeviceSlaveCntRequest* /*request*/, ::device_service::DeviceSlaveCntResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceSlaveCnt(
      ::grpc::CallbackServerContext* /*context*/, const ::device_service::DeviceSlaveCntRequest* /*request*/, ::device_service::DeviceSlaveCntResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDeviceInfo() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::device_service::DeviceInfoRequest, ::device_service::DeviceInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::device_service::DeviceInfoRequest* request, ::device_service::DeviceInfoResponse* response) { return this->GetDeviceInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetDeviceInfo(
        ::grpc::MessageAllocator< ::device_service::DeviceInfoRequest, ::device_service::DeviceInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::device_service::DeviceInfoRequest, ::device_service::DeviceInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceInfo(::grpc::ServerContext* /*context*/, const ::device_service::DeviceInfoRequest* /*request*/, ::device_service::DeviceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::device_service::DeviceInfoRequest* /*request*/, ::device_service::DeviceInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDeviceTableBySlaveId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDeviceTableBySlaveId() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::device_service::DeviceTableBySlaveIdRequest, ::device_service::DeviceTableBySlaveIdResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::device_service::DeviceTableBySlaveIdRequest* request, ::device_service::DeviceTableBySlaveIdResponse* response) { return this->GetDeviceTableBySlaveId(context, request, response); }));}
    void SetMessageAllocatorFor_GetDeviceTableBySlaveId(
        ::grpc::MessageAllocator< ::device_service::DeviceTableBySlaveIdRequest, ::device_service::DeviceTableBySlaveIdResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::device_service::DeviceTableBySlaveIdRequest, ::device_service::DeviceTableBySlaveIdResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDeviceTableBySlaveId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceTableBySlaveId(::grpc::ServerContext* /*context*/, const ::device_service::DeviceTableBySlaveIdRequest* /*request*/, ::device_service::DeviceTableBySlaveIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceTableBySlaveId(
      ::grpc::CallbackServerContext* /*context*/, const ::device_service::DeviceTableBySlaveIdRequest* /*request*/, ::device_service::DeviceTableBySlaveIdResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetDeviceStringList<WithCallbackMethod_GetDeviceSlaveCnt<WithCallbackMethod_GetDeviceInfo<WithCallbackMethod_GetDeviceTableBySlaveId<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetDeviceStringList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDeviceStringList() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetDeviceStringList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceStringList(::grpc::ServerContext* /*context*/, const ::device_service::DeviceNameListRequest* /*request*/, ::device_service::DeviceNameListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDeviceSlaveCnt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDeviceSlaveCnt() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetDeviceSlaveCnt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceSlaveCnt(::grpc::ServerContext* /*context*/, const ::device_service::DeviceSlaveCntRequest* /*request*/, ::device_service::DeviceSlaveCntResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDeviceInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceInfo(::grpc::ServerContext* /*context*/, const ::device_service::DeviceInfoRequest* /*request*/, ::device_service::DeviceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDeviceTableBySlaveId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDeviceTableBySlaveId() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetDeviceTableBySlaveId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceTableBySlaveId(::grpc::ServerContext* /*context*/, const ::device_service::DeviceTableBySlaveIdRequest* /*request*/, ::device_service::DeviceTableBySlaveIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeviceStringList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDeviceStringList() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetDeviceStringList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceStringList(::grpc::ServerContext* /*context*/, const ::device_service::DeviceNameListRequest* /*request*/, ::device_service::DeviceNameListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceStringList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeviceSlaveCnt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDeviceSlaveCnt() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetDeviceSlaveCnt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceSlaveCnt(::grpc::ServerContext* /*context*/, const ::device_service::DeviceSlaveCntRequest* /*request*/, ::device_service::DeviceSlaveCntResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceSlaveCnt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDeviceInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceInfo(::grpc::ServerContext* /*context*/, const ::device_service::DeviceInfoRequest* /*request*/, ::device_service::DeviceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDeviceTableBySlaveId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDeviceTableBySlaveId() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetDeviceTableBySlaveId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceTableBySlaveId(::grpc::ServerContext* /*context*/, const ::device_service::DeviceTableBySlaveIdRequest* /*request*/, ::device_service::DeviceTableBySlaveIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDeviceTableBySlaveId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDeviceStringList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDeviceStringList() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDeviceStringList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDeviceStringList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceStringList(::grpc::ServerContext* /*context*/, const ::device_service::DeviceNameListRequest* /*request*/, ::device_service::DeviceNameListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceStringList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDeviceSlaveCnt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDeviceSlaveCnt() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDeviceSlaveCnt(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDeviceSlaveCnt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceSlaveCnt(::grpc::ServerContext* /*context*/, const ::device_service::DeviceSlaveCntRequest* /*request*/, ::device_service::DeviceSlaveCntResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceSlaveCnt(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDeviceInfo() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDeviceInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceInfo(::grpc::ServerContext* /*context*/, const ::device_service::DeviceInfoRequest* /*request*/, ::device_service::DeviceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDeviceTableBySlaveId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDeviceTableBySlaveId() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDeviceTableBySlaveId(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDeviceTableBySlaveId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDeviceTableBySlaveId(::grpc::ServerContext* /*context*/, const ::device_service::DeviceTableBySlaveIdRequest* /*request*/, ::device_service::DeviceTableBySlaveIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDeviceTableBySlaveId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeviceStringList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDeviceStringList() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::device_service::DeviceNameListRequest, ::device_service::DeviceNameListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::device_service::DeviceNameListRequest, ::device_service::DeviceNameListResponse>* streamer) {
                       return this->StreamedGetDeviceStringList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDeviceStringList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeviceStringList(::grpc::ServerContext* /*context*/, const ::device_service::DeviceNameListRequest* /*request*/, ::device_service::DeviceNameListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeviceStringList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::device_service::DeviceNameListRequest,::device_service::DeviceNameListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeviceSlaveCnt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDeviceSlaveCnt() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::device_service::DeviceSlaveCntRequest, ::device_service::DeviceSlaveCntResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::device_service::DeviceSlaveCntRequest, ::device_service::DeviceSlaveCntResponse>* streamer) {
                       return this->StreamedGetDeviceSlaveCnt(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDeviceSlaveCnt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeviceSlaveCnt(::grpc::ServerContext* /*context*/, const ::device_service::DeviceSlaveCntRequest* /*request*/, ::device_service::DeviceSlaveCntResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeviceSlaveCnt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::device_service::DeviceSlaveCntRequest,::device_service::DeviceSlaveCntResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeviceInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDeviceInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::device_service::DeviceInfoRequest, ::device_service::DeviceInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::device_service::DeviceInfoRequest, ::device_service::DeviceInfoResponse>* streamer) {
                       return this->StreamedGetDeviceInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDeviceInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeviceInfo(::grpc::ServerContext* /*context*/, const ::device_service::DeviceInfoRequest* /*request*/, ::device_service::DeviceInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeviceInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::device_service::DeviceInfoRequest,::device_service::DeviceInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDeviceTableBySlaveId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDeviceTableBySlaveId() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::device_service::DeviceTableBySlaveIdRequest, ::device_service::DeviceTableBySlaveIdResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::device_service::DeviceTableBySlaveIdRequest, ::device_service::DeviceTableBySlaveIdResponse>* streamer) {
                       return this->StreamedGetDeviceTableBySlaveId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDeviceTableBySlaveId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDeviceTableBySlaveId(::grpc::ServerContext* /*context*/, const ::device_service::DeviceTableBySlaveIdRequest* /*request*/, ::device_service::DeviceTableBySlaveIdResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDeviceTableBySlaveId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::device_service::DeviceTableBySlaveIdRequest,::device_service::DeviceTableBySlaveIdResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetDeviceStringList<WithStreamedUnaryMethod_GetDeviceSlaveCnt<WithStreamedUnaryMethod_GetDeviceInfo<WithStreamedUnaryMethod_GetDeviceTableBySlaveId<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetDeviceStringList<WithStreamedUnaryMethod_GetDeviceSlaveCnt<WithStreamedUnaryMethod_GetDeviceInfo<WithStreamedUnaryMethod_GetDeviceTableBySlaveId<Service > > > > StreamedService;
};

}  // namespace device_service


#endif  // GRPC_device_2eproto__INCLUDED
