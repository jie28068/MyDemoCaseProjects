// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: device.proto

#include "device.pb.h"
#include "device.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace device_service {

static const char* DeviceService_method_names[] = {
  "/device_service.DeviceService/GetDeviceStringList",
  "/device_service.DeviceService/GetDeviceSlaveCnt",
  "/device_service.DeviceService/GetDeviceInfo",
  "/device_service.DeviceService/GetDeviceTableBySlaveId",
};

std::unique_ptr< DeviceService::Stub> DeviceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DeviceService::Stub> stub(new DeviceService::Stub(channel, options));
  return stub;
}

DeviceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetDeviceStringList_(DeviceService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceSlaveCnt_(DeviceService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceInfo_(DeviceService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceTableBySlaveId_(DeviceService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DeviceService::Stub::GetDeviceStringList(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest& request, ::device_service::DeviceNameListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::device_service::DeviceNameListRequest, ::device_service::DeviceNameListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDeviceStringList_, context, request, response);
}

void DeviceService::Stub::async::GetDeviceStringList(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest* request, ::device_service::DeviceNameListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::device_service::DeviceNameListRequest, ::device_service::DeviceNameListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceStringList_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::GetDeviceStringList(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest* request, ::device_service::DeviceNameListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceStringList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::device_service::DeviceNameListResponse>* DeviceService::Stub::PrepareAsyncGetDeviceStringListRaw(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::device_service::DeviceNameListResponse, ::device_service::DeviceNameListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDeviceStringList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::device_service::DeviceNameListResponse>* DeviceService::Stub::AsyncGetDeviceStringListRaw(::grpc::ClientContext* context, const ::device_service::DeviceNameListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceStringListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::GetDeviceSlaveCnt(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest& request, ::device_service::DeviceSlaveCntResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::device_service::DeviceSlaveCntRequest, ::device_service::DeviceSlaveCntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDeviceSlaveCnt_, context, request, response);
}

void DeviceService::Stub::async::GetDeviceSlaveCnt(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest* request, ::device_service::DeviceSlaveCntResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::device_service::DeviceSlaveCntRequest, ::device_service::DeviceSlaveCntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceSlaveCnt_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::GetDeviceSlaveCnt(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest* request, ::device_service::DeviceSlaveCntResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceSlaveCnt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::device_service::DeviceSlaveCntResponse>* DeviceService::Stub::PrepareAsyncGetDeviceSlaveCntRaw(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::device_service::DeviceSlaveCntResponse, ::device_service::DeviceSlaveCntRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDeviceSlaveCnt_, context, request);
}

::grpc::ClientAsyncResponseReader< ::device_service::DeviceSlaveCntResponse>* DeviceService::Stub::AsyncGetDeviceSlaveCntRaw(::grpc::ClientContext* context, const ::device_service::DeviceSlaveCntRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceSlaveCntRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::GetDeviceInfo(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest& request, ::device_service::DeviceInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::device_service::DeviceInfoRequest, ::device_service::DeviceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDeviceInfo_, context, request, response);
}

void DeviceService::Stub::async::GetDeviceInfo(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest* request, ::device_service::DeviceInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::device_service::DeviceInfoRequest, ::device_service::DeviceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceInfo_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::GetDeviceInfo(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest* request, ::device_service::DeviceInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::device_service::DeviceInfoResponse>* DeviceService::Stub::PrepareAsyncGetDeviceInfoRaw(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::device_service::DeviceInfoResponse, ::device_service::DeviceInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDeviceInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::device_service::DeviceInfoResponse>* DeviceService::Stub::AsyncGetDeviceInfoRaw(::grpc::ClientContext* context, const ::device_service::DeviceInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DeviceService::Stub::GetDeviceTableBySlaveId(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest& request, ::device_service::DeviceTableBySlaveIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::device_service::DeviceTableBySlaveIdRequest, ::device_service::DeviceTableBySlaveIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetDeviceTableBySlaveId_, context, request, response);
}

void DeviceService::Stub::async::GetDeviceTableBySlaveId(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest* request, ::device_service::DeviceTableBySlaveIdResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::device_service::DeviceTableBySlaveIdRequest, ::device_service::DeviceTableBySlaveIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceTableBySlaveId_, context, request, response, std::move(f));
}

void DeviceService::Stub::async::GetDeviceTableBySlaveId(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest* request, ::device_service::DeviceTableBySlaveIdResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetDeviceTableBySlaveId_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::device_service::DeviceTableBySlaveIdResponse>* DeviceService::Stub::PrepareAsyncGetDeviceTableBySlaveIdRaw(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::device_service::DeviceTableBySlaveIdResponse, ::device_service::DeviceTableBySlaveIdRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetDeviceTableBySlaveId_, context, request);
}

::grpc::ClientAsyncResponseReader< ::device_service::DeviceTableBySlaveIdResponse>* DeviceService::Stub::AsyncGetDeviceTableBySlaveIdRaw(::grpc::ClientContext* context, const ::device_service::DeviceTableBySlaveIdRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDeviceTableBySlaveIdRaw(context, request, cq);
  result->StartCall();
  return result;
}

DeviceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::device_service::DeviceNameListRequest, ::device_service::DeviceNameListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::device_service::DeviceNameListRequest* req,
             ::device_service::DeviceNameListResponse* resp) {
               return service->GetDeviceStringList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::device_service::DeviceSlaveCntRequest, ::device_service::DeviceSlaveCntResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::device_service::DeviceSlaveCntRequest* req,
             ::device_service::DeviceSlaveCntResponse* resp) {
               return service->GetDeviceSlaveCnt(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::device_service::DeviceInfoRequest, ::device_service::DeviceInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::device_service::DeviceInfoRequest* req,
             ::device_service::DeviceInfoResponse* resp) {
               return service->GetDeviceInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeviceService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DeviceService::Service, ::device_service::DeviceTableBySlaveIdRequest, ::device_service::DeviceTableBySlaveIdResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DeviceService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::device_service::DeviceTableBySlaveIdRequest* req,
             ::device_service::DeviceTableBySlaveIdResponse* resp) {
               return service->GetDeviceTableBySlaveId(ctx, req, resp);
             }, this)));
}

DeviceService::Service::~Service() {
}

::grpc::Status DeviceService::Service::GetDeviceStringList(::grpc::ServerContext* context, const ::device_service::DeviceNameListRequest* request, ::device_service::DeviceNameListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::GetDeviceSlaveCnt(::grpc::ServerContext* context, const ::device_service::DeviceSlaveCntRequest* request, ::device_service::DeviceSlaveCntResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::GetDeviceInfo(::grpc::ServerContext* context, const ::device_service::DeviceInfoRequest* request, ::device_service::DeviceInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DeviceService::Service::GetDeviceTableBySlaveId(::grpc::ServerContext* context, const ::device_service::DeviceTableBySlaveIdRequest* request, ::device_service::DeviceTableBySlaveIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace device_service

